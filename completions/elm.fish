# complete -c elm -a 'repl init reactor make install bump diff publish'

complete -c elm -n "__fish_use_subcommand" -l help -d 'Prints help information'
complete -c elm -n "__fish_use_subcommand" -f -a "repl" -d 'opens up an interactive programming session'
complete -c elm -n "__fish_seen_subcommand_from repl" -l help -d 'Prints help information'
complete -c elm -n "__fish_seen_subcommand_from repl" -l interpreter= -d 'Path to a alternate JS interpreter, like node or nodejs.'
complete -c elm -n "__fish_seen_subcommand_from repl" -l no-colors -d 'Turn off the colors in the REPL'
complete -c elm -n "__fish_use_subcommand" -f -a "init" -d 'helps start Elm projects'
complete -c elm -n "__fish_seen_subcommand_from init" -l help -d 'Prints help information'
complete -c elm -n "__fish_use_subcommand" -f -a "reactor" -d 'starts a local server on your computer'
complete -c elm -n "__fish_seen_subcommand_from reactor" -l help -d 'Prints help information'
complete -c elm -n "__fish_seen_subcommand_from reactor" -l port= -d 'The port of the server (default: 8000)'
complete -c elm -n "__fish_use_subcommand" -f -a "make" -d 'compiles Elm code into JS or HTML'
complete -c elm -n "__fish_seen_subcommand_from make" -l help -d 'Prints help information'
complete -c elm -n "__fish_seen_subcommand_from make" -l debug -d 'Turn on the time-travelling debugger'
complete -c elm -n "__fish_seen_subcommand_from make" -l optimize -d 'Turn on optimizations to make code smaller and faster'
complete -c elm -n "__fish_seen_subcommand_from make" -l output= -d 'Specify the name of the resulting JS file'
complete -c elm -n "__fish_seen_subcommand_from make" -l report= -d 'You can say --report=json to get error messages as JSON'
complete -c elm -n "__fish_seen_subcommand_from make" -l docs= -d 'Generate a JSON file of documentation for a package'
complete -c elm -n "__fish_use_subcommand" -f -a "install" -d 'fetches packages'
complete -c elm -n "__fish_seen_subcommand_from install" -l help -d 'Prints help information'
complete -c elm -n "__fish_use_subcommand" -f -a "bump" -d 'figures out the next version number based on API changes'
complete -c elm -n "__fish_seen_subcommand_from bump" -l help -d 'Prints help information'
complete -c elm -n "__fish_use_subcommand" -f -a "diff" -d 'detects API changes'
complete -c elm -n "__fish_seen_subcommand_from diff" -l help -d 'Prints help information'
complete -c elm -n "__fish_use_subcommand" -f -a "publish" -d 'publishes your package'
complete -c elm -n "__fish_seen_subcommand_from publish" -l help -d 'Prints help information'
